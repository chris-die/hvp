import videojs, { VideoJsPlayer as VideoJsPlayerBase } from 'video.js'
// import '!style-loader!css-loader!video.js/dist/video-js.css'
import 'video.js/dist/video-js.css'
import './style.css'

// Adds missing TS definitions from `@types/video.js`.
// Hopefully we can remove this at some stage when `@types/video.js` is updated.
// Keep watching npm page for new versions (currently on 7.3.27):
// https://www.npmjs.com/package/@types/video.js
interface VideoJsPlayer extends VideoJsPlayerBase {
  /**
   * Disable Picture-in-Picture mode.
   *
   * @param {boolean} value
   *                  - true will disable Picture-in-Picture mode
   *                  - false will enable Picture-in-Picture mode
   */
  disablePictureInPicture(value: boolean): void;
}

interface UrlOptions {
  /** Display controls. Defaults to `true`. */
  controls: boolean;
  /** Play muted. Defaults to `false`. */
  muted: boolean;
  /** Autoplay. Defaults to `true`. */
  autoplay: boolean;
  /** Allow Picture-in-Picture. Defaults to `true`. */
  pictureInPicture: boolean;
}

const queryStringParams = new URLSearchParams(location.search)

// Get player options that can be set via URL
const urlOptions = ((qs: URLSearchParams): UrlOptions => {
  return {
    controls: qs.get('controls') === null || qs.get('controls') !== '0',
    muted: qs.get('muted') === '1',
    autoplay: qs.get('autoplay') === null || qs.get('autoplay') !== '0',
    pictureInPicture: qs.get('pip') === null || qs.get('pip') !== '0',
  }
})(queryStringParams)

// Get the source stream
const source = ((qs: URLSearchParams): videojs.Tech.SourceObject => {
  // TODO: build up URL using `id` param.
  return {
    src: qs.get('src'),
    type: 'application/x-mpegURL',
  }
})(queryStringParams)


const player: VideoJsPlayer = <VideoJsPlayer>videojs(
  'player', {
    // https://docs.videojs.com/tutorial-options.html
    controls: urlOptions.controls,
    muted: urlOptions.muted,
    autoplay: urlOptions.autoplay,
    controlBar: {
      'pictureInPictureToggle': urlOptions.pictureInPicture
    },
    preload: 'auto',
    // Layout options explained here:
    // https://docs.videojs.com/tutorial-layout.html
    fill: true,
    responsive: true,
  }
)

// This is ignored by Firefox. There's no way to disabled PIP.
// Firefox will also show the `Watch in Picture-in-Picture` option in the context menu
// and display that annoying little overlay icon on the right side of the video :-(
player.disablePictureInPicture(!urlOptions.pictureInPicture)

player.src(source)

// player.ready(() => {
//   console.log(['ready', window.location, window.document.location, window.top.location])
// })

// App
//  - `id` URL arg
//  - Poster image
//  - `src` URL arg

// HLS test streams (untested)
// https://github.com/bengarney/list-of-streams

// Analytics
// - Only for Serato vids)
// - Use window.top to get location of embed
// - Useful videojs events
//  - `timeupdate` event (can't find in docs)

// CSP considerations
// - Nonce? https://content-security-policy.com/nonce/
// - Hash? https://content-security-policy.com/hash/
// - Either would need Lambda@Edge
// - Make a .txt file with all CSP headers and use those in edge function?
//    - File would be dynamically generated by build process and produce hash values for css and js files

// `embed.html` test page
// - Show production embed snippet using const playerProductionDomain
// - Add snippet to clipboard

// Add a linter

// Polyfill for URLSearchParams ?????
// See browser support:
// https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams